
XMC4700_BAR_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019b0  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00010000  2**0
                  ALLOC
  2 .bss          00000138  1ffe8800  0c0019b0  00010800  2**2
                  ALLOC
  3 .no_init      00000014  2003ffc0  2003ffc0  0000ffc0  2**2
                  ALLOC
  4 .debug_aranges 000006e8  00000000  00000000  000099b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007265  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001604  00000000  00000000  000112fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002ec9  00000000  00000000  00012901  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001b54  00000000  00000000  000157cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003ff8  00000000  00000000  00017320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003728  00000000  00000000  0001b318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005d8  00000000  00000000  0001ea40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .build_attributes 00000359  00000000  00000000  0001f018  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	01 12 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0019b0 	.word	0x0c0019b0
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000000 	.word	0x00000000
 8000254:	0c0019b0 	.word	0x0c0019b0
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8800 	.word	0x1ffe8800
 8000264:	00000138 	.word	0x00000138
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	080018ad 	.word	0x080018ad
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080017e1 	.word	0x080017e1

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f001 f927 	bl	8001500 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f001 f98f 	bl	80015d4 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f001 f96e 	bl	80015c0 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_GetMirrorStatus+0x14>)
 80004e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	50004000 	.word	0x50004000

080004f4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80004fc:	f7ff fede 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <XMC_SCU_lDelay+0x3c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <XMC_SCU_lDelay+0x40>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	0c9a      	lsrs	r2, r3, #18
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e003      	b.n	8000522 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800051a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3f7      	bcc.n	800051a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2003ffc0 	.word	0x2003ffc0
 8000534:	431bde83 	.word	0x431bde83

08000538 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800053e:	685b      	ldr	r3, [r3, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	50004074 	.word	0x50004074

08000550 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60d3      	str	r3, [r2, #12]
}
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	50004074 	.word	0x50004074

0800056c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f875 	bl	8000664 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800057a:	f000 fa27 	bl	80009cc <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00a      	beq.n	800059c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000586:	f000 fa5f 	bl	8000a48 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800058a:	bf00      	nop
 800058c:	f000 fa4a 	bl	8000a24 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000590:	4603      	mov	r3, r0
 8000592:	f083 0301 	eor.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f7      	bne.n	800058c <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7a5b      	ldrb	r3, [r3, #9]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f8d9 	bl	8000758 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005a6:	bf00      	nop
 80005a8:	f7ff ff98 	bl	80004dc <XMC_SCU_GetMirrorStatus>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1fa      	bne.n	80005a8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7a1b      	ldrb	r3, [r3, #8]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f9e2 	bl	8000980 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7c1b      	ldrb	r3, [r3, #16]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f8e7 	bl	8000794 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7c5b      	ldrb	r3, [r3, #17]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f90a 	bl	80007e4 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7c9b      	ldrb	r3, [r3, #18]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f8f1 	bl	80007bc <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7cdb      	ldrb	r3, [r3, #19]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f914 	bl	800080c <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00a      	beq.n	8000602 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005ec:	f000 fa64 	bl	8000ab8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005f0:	bf00      	nop
 80005f2:	f000 fa89 	bl	8000b08 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f7      	bne.n	80005f2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	799b      	ldrb	r3, [r3, #6]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d017      	beq.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000618:	f000 fa9a 	bl	8000b50 <XMC_SCU_CLOCK_DisableSystemPll>
 800061c:	e014      	b.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800061e:	f000 fa87 	bl	8000b30 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8899      	ldrh	r1, [r3, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062e:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000634:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4608      	mov	r0, r1
 800063e:	4611      	mov	r1, r2
 8000640:	462a      	mov	r2, r5
 8000642:	4623      	mov	r3, r4
 8000644:	f000 fa94 	bl	8000b70 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000650:	d103      	bne.n	800065a <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000652:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000656:	f000 f805 	bl	8000664 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800065a:	f7ff fe2f 	bl	80002bc <SystemCoreClockUpdate>
}
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bdb0      	pop	{r4, r5, r7, pc}

08000664 <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800066c:	4906      	ldr	r1, [pc, #24]	; (8000688 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4313      	orrs	r3, r2
 800067a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	50004600 	.word	0x50004600

0800068c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000694:	4906      	ldr	r1, [pc, #24]	; (80006b0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	50004600 	.word	0x50004600

080006b4 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006bc:	4906      	ldr	r1, [pc, #24]	; (80006d8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	50004600 	.word	0x50004600

080006dc <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d108      	bne.n	80006fe <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	60d3      	str	r3, [r2, #12]
 80006fc:	e007      	b.n	800070e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80006fe:	4a06      	ldr	r2, [pc, #24]	; (8000718 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	60d3      	str	r3, [r2, #12]
  }
}
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	50004710 	.word	0x50004710

0800071c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000726:	bf00      	nop
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800072a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f8      	bne.n	8000728 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000736:	4907      	ldr	r1, [pc, #28]	; (8000754 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000740:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000742:	4313      	orrs	r3, r2
 8000744:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	50004000 	.word	0x50004000
 8000754:	50004300 	.word	0x50004300

08000758 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000762:	bf00      	nop
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000766:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f8      	bne.n	8000764 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 800077c:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800077e:	4313      	orrs	r3, r2
 8000780:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	50004000 	.word	0x50004000
 8000790:	50004300 	.word	0x50004300

08000794 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800079c:	4906      	ldr	r1, [pc, #24]	; (80007b8 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007aa:	4313      	orrs	r3, r2
 80007ac:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	50004600 	.word	0x50004600

080007bc <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007c4:	4906      	ldr	r1, [pc, #24]	; (80007e0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007c8:	6a1b      	ldr	r3, [r3, #32]
 80007ca:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007d2:	4313      	orrs	r3, r2
 80007d4:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	50004600 	.word	0x50004600

080007e4 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80007ec:	4906      	ldr	r1, [pc, #24]	; (8000808 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004600 	.word	0x50004600

0800080c <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000814:	4906      	ldr	r1, [pc, #24]	; (8000830 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000822:	4313      	orrs	r3, r2
 8000824:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	50004600 	.word	0x50004600

08000834 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800084a:	4313      	orrs	r3, r2
 800084c:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	50004600 	.word	0x50004600

0800085c <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000864:	4906      	ldr	r1, [pc, #24]	; (8000880 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000872:	4313      	orrs	r3, r2
 8000874:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	50004600 	.word	0x50004600

08000884 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800088c:	4906      	ldr	r1, [pc, #24]	; (80008a8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000892:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800089a:	4313      	orrs	r3, r2
 800089c:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	50004600 	.word	0x50004600

080008ac <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80008b0:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ba:	f023 0302 	bic.w	r3, r3, #2
 80008be:	6153      	str	r3, [r2, #20]
}
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	50004710 	.word	0x50004710

080008cc <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80008d6:	4a28      	ldr	r2, [pc, #160]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80008e2:	bf00      	nop
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80008f0:	4a21      	ldr	r2, [pc, #132]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80008fc:	491e      	ldr	r1, [pc, #120]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3b01      	subs	r3, #1
 8000902:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800090a:	4313      	orrs	r3, r2
 800090c:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800090e:	4a1a      	ldr	r2, [pc, #104]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000918:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	f023 0310 	bic.w	r3, r3, #16
 8000924:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000926:	4a14      	ldr	r2, [pc, #80]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000930:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000932:	bf00      	nop
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000936:	691b      	ldr	r3, [r3, #16]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0f9      	beq.n	8000934 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 800094c:	bf00      	nop
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f9      	bne.n	800094e <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800095a:	4a07      	ldr	r2, [pc, #28]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000964:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000968:	2208      	movs	r2, #8
 800096a:	60da      	str	r2, [r3, #12]
}
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	50004710 	.word	0x50004710
 800097c:	50004160 	.word	0x50004160

08000980 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000994:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10e      	bne.n	80009ba <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009a6:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009a8:	2064      	movs	r0, #100	; 0x64
 80009aa:	f7ff fda3 	bl	80004f4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009ae:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009b8:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f7ff fd9a 	bl	80004f4 <XMC_SCU_lDelay>
}
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	50004710 	.word	0x50004710

080009cc <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d109      	bne.n	80009f0 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009de:	2201      	movs	r2, #1
 80009e0:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009e2:	bf00      	nop
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0f9      	beq.n	80009e4 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d00a      	beq.n	8000a12 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a02:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a04:	bf00      	nop
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f9      	bne.n	8000a06 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	50004200 	.word	0x50004200
 8000a20:	50004400 	.word	0x50004400

08000a24 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf0c      	ite	eq
 8000a34:	2301      	moveq	r3, #1
 8000a36:	2300      	movne	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	50004300 	.word	0x50004300

08000a48 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000a4c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a50:	f7ff fd7e 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a5e:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000a60:	bf00      	nop
 8000a62:	f7ff fd69 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f8      	beq.n	8000a62 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000a70:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a74:	f7ff fd6c 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000a7e:	bf00      	nop
 8000a80:	f7ff fd5a 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f8      	beq.n	8000a80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000a8e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a92:	f7ff fd5d 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a96:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000aa2:	bf00      	nop
 8000aa4:	f7ff fd48 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0f8      	beq.n	8000aa4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	50004300 	.word	0x50004300

08000ab8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac6:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ac8:	4d0d      	ldr	r5, [pc, #52]	; (8000b00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ad2:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ad6:	f000 fd73 	bl	80015c0 <OSCHP_GetFrequency>
 8000ada:	4602      	mov	r2, r0
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000ade:	fba3 2302 	umull	r2, r3, r3, r2
 8000ae2:	0d1b      	lsrs	r3, r3, #20
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ae8:	4323      	orrs	r3, r4
 8000aea:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000af6:	6053      	str	r3, [r2, #4]
}
 8000af8:	bdb0      	pop	{r4, r5, r7, pc}
 8000afa:	bf00      	nop
 8000afc:	50004710 	.word	0x50004710
 8000b00:	50004700 	.word	0x50004700
 8000b04:	6b5fca6b 	.word	0x6b5fca6b

08000b08 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b14:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	50004710 	.word	0x50004710

08000b30 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b3e:	f023 0302 	bic.w	r3, r3, #2
 8000b42:	6053      	str	r3, [r2, #4]
}
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	50004710 	.word	0x50004710

08000b50 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	6053      	str	r3, [r2, #4]
}
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	50004710 	.word	0x50004710

08000b70 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60ba      	str	r2, [r7, #8]
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	81fb      	strh	r3, [r7, #14]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fda9 	bl	80006dc <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b8a:	7b7b      	ldrb	r3, [r7, #13]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	f040 808b 	bne.w	8000ca8 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b98:	f000 fd12 	bl	80015c0 <OSCHP_GetFrequency>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ba4:	0c9b      	lsrs	r3, r3, #18
 8000ba6:	059b      	lsls	r3, r3, #22
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e002      	b.n	8000bb2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000bac:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bb0:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	fb02 f203 	mul.w	r2, r2, r3
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc0:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	4a4b      	ldr	r2, [pc, #300]	; (8000cf4 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	0d9b      	lsrs	r3, r3, #22
 8000bce:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bd0:	4a49      	ldr	r2, [pc, #292]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bd2:	4b49      	ldr	r3, [pc, #292]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000bdc:	bf00      	nop
 8000bde:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f9      	beq.n	8000bde <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bea:	4a43      	ldr	r2, [pc, #268]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bec:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bf6:	4940      	ldr	r1, [pc, #256]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bf8:	4b3f      	ldr	r3, [pc, #252]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000bfe:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	3a01      	subs	r2, #1
 8000c04:	0212      	lsls	r2, r2, #8
 8000c06:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c0e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c16:	4313      	orrs	r3, r2
 8000c18:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c1a:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c24:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c26:	4a34      	ldr	r2, [pc, #208]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c28:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f023 0310 	bic.w	r3, r3, #16
 8000c30:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c32:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c34:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c3e:	bf00      	nop
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f9      	beq.n	8000c40 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c4c:	4a2a      	ldr	r2, [pc, #168]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f023 0301 	bic.w	r3, r3, #1
 8000c56:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c58:	bf00      	nop
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f9      	bne.n	8000c5a <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	0d9b      	lsrs	r3, r3, #22
 8000c72:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c74:	6a3a      	ldr	r2, [r7, #32]
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d202      	bcs.n	8000c82 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c7c:	6938      	ldr	r0, [r7, #16]
 8000c7e:	f000 f845 	bl	8000d0c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	085b      	lsrs	r3, r3, #1
 8000c86:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000c88:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8c:	095b      	lsrs	r3, r3, #5
 8000c8e:	0d9b      	lsrs	r3, r3, #22
 8000c90:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c92:	6a3a      	ldr	r2, [r7, #32]
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d202      	bcs.n	8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c9a:	6938      	ldr	r0, [r7, #16]
 8000c9c:	f000 f836 	bl	8000d0c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000ca0:	6a38      	ldr	r0, [r7, #32]
 8000ca2:	f000 f833 	bl	8000d0c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000ca6:	e01c      	b.n	8000ce2 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ca8:	4913      	ldr	r1, [pc, #76]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000cba:	bf00      	nop
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f9      	beq.n	8000cbc <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cd4:	bf00      	nop
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f9      	beq.n	8000cd6 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	60da      	str	r2, [r3, #12]
}
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	431bde83 	.word	0x431bde83
 8000cf4:	aaaaaaab 	.word	0xaaaaaaab
 8000cf8:	50004710 	.word	0x50004710
 8000cfc:	f08080ff 	.word	0xf08080ff
 8000d00:	88888889 	.word	0x88888889
 8000d04:	b60b60b7 	.word	0xb60b60b7
 8000d08:	50004160 	.word	0x50004160

08000d0c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d14:	490b      	ldr	r1, [pc, #44]	; (8000d44 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d24:	4313      	orrs	r3, r2
 8000d26:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000d28:	bf00      	nop
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0320 	and.w	r3, r3, #32
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f9      	beq.n	8000d2a <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000d36:	2032      	movs	r0, #50	; 0x32
 8000d38:	f7ff fbdc 	bl	80004f4 <XMC_SCU_lDelay>
}
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	50004710 	.word	0x50004710

08000d48 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
 8000d54:	4613      	mov	r3, r2
 8000d56:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	2303      	movs	r3, #3
 8000d64:	408b      	lsls	r3, r1
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000d72:	78bb      	ldrb	r3, [r7, #2]
 8000d74:	78f9      	ldrb	r1, [r7, #3]
 8000d76:	0049      	lsls	r1, r1, #1
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <_init>:
  }
}

/* Init */
void _init(void)
{}
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000da4:	0a1b      	lsrs	r3, r3, #8
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	490d      	ldr	r1, [pc, #52]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	4909      	ldr	r1, [pc, #36]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
  }
}
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	bf28      	it	cs
 8000e26:	2306      	movcs	r3, #6
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3306      	adds	r3, #6
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	1e5a      	subs	r2, r3, #1
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	401a      	ands	r2, r3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2101      	movs	r1, #1
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	1e59      	subs	r1, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000e5c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8e:	213f      	movs	r1, #63	; 0x3f
 8000e90:	f7ff ff90 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8000eb0:	b490      	push	{r4, r7}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8000ebc:	496b      	ldr	r1, [pc, #428]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	3318      	adds	r3, #24
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8000ed0:	4b67      	ldr	r3, [pc, #412]	; (8001070 <SYSTIMER_lInsertTimerList+0x1c0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4a62      	ldr	r2, [pc, #392]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a62      	ldr	r2, [pc, #392]	; (8001070 <SYSTIMER_lInsertTimerList+0x1c0>)
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e0bb      	b.n	8001064 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8000eec:	4b60      	ldr	r3, [pc, #384]	; (8001070 <SYSTIMER_lInsertTimerList+0x1c0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8000ef6:	e0ab      	b.n	8001050 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	461a      	mov	r2, r3
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	dc7a      	bgt.n	8001000 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d026      	beq.n	8000f60 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	6859      	ldr	r1, [r3, #4]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4a52      	ldr	r2, [pc, #328]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000f22:	4413      	add	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	6859      	ldr	r1, [r3, #4]
 8000f2a:	4850      	ldr	r0, [pc, #320]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4403      	add	r3, r0
 8000f38:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8000f3a:	494c      	ldr	r1, [pc, #304]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4a45      	ldr	r2, [pc, #276]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000f58:	441a      	add	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	e01c      	b.n	8000f9a <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <SYSTIMER_lInsertTimerList+0x1c0>)
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	4841      	ldr	r0, [pc, #260]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4403      	add	r3, r0
 8000f72:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <SYSTIMER_lInsertTimerList+0x1c0>)
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4a3a      	ldr	r2, [pc, #232]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000f84:	4413      	add	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4a36      	ldr	r2, [pc, #216]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000f94:	4413      	add	r3, r2
 8000f96:	4a36      	ldr	r2, [pc, #216]	; (8001070 <SYSTIMER_lInsertTimerList+0x1c0>)
 8000f98:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8000f9a:	4934      	ldr	r1, [pc, #208]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	699a      	ldr	r2, [r3, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	18d1      	adds	r1, r2, r3
 8000fb0:	482e      	ldr	r0, [pc, #184]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4403      	add	r3, r0
 8000fbe:	3318      	adds	r3, #24
 8000fc0:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8000fc2:	492a      	ldr	r1, [pc, #168]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	6819      	ldr	r1, [r3, #0]
 8000fd2:	4826      	ldr	r0, [pc, #152]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4403      	add	r3, r0
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6998      	ldr	r0, [r3, #24]
 8000fe4:	4c21      	ldr	r4, [pc, #132]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4423      	add	r3, r4
 8000ff2:	3318      	adds	r3, #24
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	1ac3      	subs	r3, r0, r3
 8000ff8:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e024      	b.n	800104a <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	2b00      	cmp	r3, #0
 8001004:	dd21      	ble.n	800104a <SYSTIMER_lInsertTimerList+0x19a>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d11d      	bne.n	800104a <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 800100e:	4917      	ldr	r1, [pc, #92]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 800102c:	441a      	add	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8001032:	6939      	ldr	r1, [r7, #16]
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <SYSTIMER_lInsertTimerList+0x1bc>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4403      	add	r3, r0
 8001042:	3318      	adds	r3, #24
 8001044:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d006      	beq.n	8001064 <SYSTIMER_lInsertTimerList+0x1b4>
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f083 0301 	eor.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	f47f af4a 	bne.w	8000ef8 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bc90      	pop	{r4, r7}
 800106a:	4770      	bx	lr
 800106c:	1ffe8818 	.word	0x1ffe8818
 8001070:	1ffe8800 	.word	0x1ffe8800

08001074 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4a29      	ldr	r2, [pc, #164]	; (800112c <SYSTIMER_lRemoveTimerList+0xb8>)
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d107      	bne.n	80010a4 <SYSTIMER_lRemoveTimerList+0x30>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <SYSTIMER_lRemoveTimerList+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e03d      	b.n	8001120 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d114      	bne.n	80010d6 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <SYSTIMER_lRemoveTimerList+0xbc>)
 80010b2:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <SYSTIMER_lRemoveTimerList+0xbc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <SYSTIMER_lRemoveTimerList+0xbc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <SYSTIMER_lRemoveTimerList+0xbc>)
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	6991      	ldr	r1, [r2, #24]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	6992      	ldr	r2, [r2, #24]
 80010ca:	440a      	add	r2, r1
 80010cc:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e024      	b.n	8001120 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d107      	bne.n	80010ee <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	e018      	b.n	8001120 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	6852      	ldr	r2, [r2, #4]
 8001100:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	6991      	ldr	r1, [r2, #24]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	6992      	ldr	r2, [r2, #24]
 8001110:	440a      	add	r2, r1
 8001112:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  }
}
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	1ffe8818 	.word	0x1ffe8818
 8001130:	1ffe8800 	.word	0x1ffe8800

08001134 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 800113a:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <SYSTIMER_lTimerHandler+0xc4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8001140:	e050      	b.n	80011e4 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff8f 	bl	8001074 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	461a      	mov	r2, r3
 8001162:	2301      	movs	r3, #1
 8001164:	4093      	lsls	r3, r2
 8001166:	43da      	mvns	r2, r3
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <SYSTIMER_lTimerHandler+0xc8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4013      	ands	r3, r2
 800116e:	4a23      	ldr	r2, [pc, #140]	; (80011fc <SYSTIMER_lTimerHandler+0xc8>)
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e034      	b.n	80011de <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7b1b      	ldrb	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d112      	bne.n	80011a2 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7b5b      	ldrb	r3, [r3, #13]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d12c      	bne.n	80011de <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff73 	bl	8001074 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2202      	movs	r2, #2
 8001192:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6912      	ldr	r2, [r2, #16]
 800119c:	4610      	mov	r0, r2
 800119e:	4798      	blx	r3
 80011a0:	e01d      	b.n	80011de <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7b1b      	ldrb	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d118      	bne.n	80011dc <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7b5b      	ldrb	r3, [r3, #13]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d115      	bne.n	80011de <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff5c 	bl	8001074 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69da      	ldr	r2, [r3, #28]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fe71 	bl	8000eb0 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6912      	ldr	r2, [r2, #16]
 80011d6:	4610      	mov	r0, r2
 80011d8:	4798      	blx	r3
 80011da:	e000      	b.n	80011de <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 80011dc:	e009      	b.n	80011f2 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SYSTIMER_lTimerHandler+0xc4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <SYSTIMER_lTimerHandler+0xbe>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0a7      	beq.n	8001142 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	1ffe8800 	.word	0x1ffe8800
 80011fc:	1ffe8804 	.word	0x1ffe8804

08001200 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <SysTick_Handler+0x40>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <SysTick_Handler+0x44>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <SysTick_Handler+0x44>)
 8001214:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00e      	beq.n	800123a <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d905      	bls.n	8001230 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	1e5a      	subs	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	e004      	b.n	800123a <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8001236:	f7ff ff7d 	bl	8001134 <SYSTIMER_lTimerHandler>
    }
  }
}
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	1ffe8800 	.word	0x1ffe8800
 8001244:	1ffe8808 	.word	0x1ffe8808

08001248 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d020      	beq.n	80012a4 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <SYSTIMER_Init+0x68>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8001268:	4812      	ldr	r0, [pc, #72]	; (80012b4 <SYSTIMER_Init+0x6c>)
 800126a:	f7ff fdff 	bl	8000e6c <SysTick_Config>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d015      	beq.n	80012a4 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8001278:	f7ff fd8e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 800127c:	4603      	mov	r3, r0
 800127e:	4618      	mov	r0, r3
 8001280:	213f      	movs	r1, #63	; 0x3f
 8001282:	2200      	movs	r2, #0
 8001284:	f7ff fdc0 	bl	8000e08 <NVIC_EncodePriority>
 8001288:	4603      	mov	r3, r0
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fd90 	bl	8000db4 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <SYSTIMER_Init+0x70>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	1ffe8800 	.word	0x1ffe8800
 80012b4:	00023280 	.word	0x00023280
 80012b8:	1ffe8804 	.word	0x1ffe8804

080012bc <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	460b      	mov	r3, r1
 80012ca:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012de:	d202      	bcs.n	80012e6 <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	e07b      	b.n	80013de <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	e075      	b.n	80013d8 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2201      	movs	r2, #1
 80012f0:	409a      	lsls	r2, r3
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <SYSTIMER_CreateTimer+0x130>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d16a      	bne.n	80013d2 <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2201      	movs	r2, #1
 8001300:	409a      	lsls	r2, r3
 8001302:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <SYSTIMER_CreateTimer+0x130>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4313      	orrs	r3, r2
 8001308:	4a38      	ldr	r2, [pc, #224]	; (80013ec <SYSTIMER_CreateTimer+0x130>)
 800130a:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 800130c:	4938      	ldr	r1, [pc, #224]	; (80013f0 <SYSTIMER_CreateTimer+0x134>)
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3310      	adds	r3, #16
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8001320:	4933      	ldr	r1, [pc, #204]	; (80013f0 <SYSTIMER_CreateTimer+0x134>)
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3308      	adds	r3, #8
 8001330:	7afa      	ldrb	r2, [r7, #11]
 8001332:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8001334:	492e      	ldr	r1, [pc, #184]	; (80013f0 <SYSTIMER_CreateTimer+0x134>)
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	3308      	adds	r3, #8
 8001344:	2202      	movs	r2, #2
 8001346:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4a2a      	ldr	r2, [pc, #168]	; (80013f4 <SYSTIMER_CreateTimer+0x138>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	1c59      	adds	r1, r3, #1
 8001358:	4825      	ldr	r0, [pc, #148]	; (80013f0 <SYSTIMER_CreateTimer+0x134>)
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4613      	mov	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4403      	add	r3, r0
 8001366:	3318      	adds	r3, #24
 8001368:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 800136a:	4921      	ldr	r1, [pc, #132]	; (80013f0 <SYSTIMER_CreateTimer+0x134>)
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3318      	adds	r3, #24
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 800137e:	491c      	ldr	r1, [pc, #112]	; (80013f0 <SYSTIMER_CreateTimer+0x134>)
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	3308      	adds	r3, #8
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8001392:	4917      	ldr	r1, [pc, #92]	; (80013f0 <SYSTIMER_CreateTimer+0x134>)
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	3310      	adds	r3, #16
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 80013a6:	4912      	ldr	r1, [pc, #72]	; (80013f0 <SYSTIMER_CreateTimer+0x134>)
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 80013b8:	490d      	ldr	r1, [pc, #52]	; (80013f0 <SYSTIMER_CreateTimer+0x134>)
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	3301      	adds	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
        break;
 80013d0:	e005      	b.n	80013de <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	d986      	bls.n	80012ec <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 80013de:	69fb      	ldr	r3, [r7, #28]
}  
 80013e0:	4618      	mov	r0, r3
 80013e2:	3724      	adds	r7, #36	; 0x24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	1ffe8804 	.word	0x1ffe8804
 80013f0:	1ffe8818 	.word	0x1ffe8818
 80013f4:	10624dd3 	.word	0x10624dd3

080013f8 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	491a      	ldr	r1, [pc, #104]	; (8001474 <SYSTIMER_StartTimer+0x7c>)
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	3308      	adds	r3, #8
 8001416:	795b      	ldrb	r3, [r3, #5]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d126      	bne.n	800146a <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1e59      	subs	r1, r3, #1
 8001424:	4813      	ldr	r0, [pc, #76]	; (8001474 <SYSTIMER_StartTimer+0x7c>)
 8001426:	460b      	mov	r3, r1
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4403      	add	r3, r0
 8001430:	3318      	adds	r3, #24
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	1c59      	adds	r1, r3, #1
 8001436:	480f      	ldr	r0, [pc, #60]	; (8001474 <SYSTIMER_StartTimer+0x7c>)
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4403      	add	r3, r0
 8001442:	3318      	adds	r3, #24
 8001444:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	1e5a      	subs	r2, r3, #1
 800144a:	490a      	ldr	r1, [pc, #40]	; (8001474 <SYSTIMER_StartTimer+0x7c>)
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	3308      	adds	r3, #8
 8001458:	2201      	movs	r2, #1
 800145a:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fd25 	bl	8000eb0 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	1ffe8818 	.word	0x1ffe8818

08001478 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7c1a      	ldrb	r2, [r3, #16]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3304      	adds	r3, #4
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	f7fe ff7d 	bl	8000390 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6819      	ldr	r1, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7c1a      	ldrb	r2, [r3, #16]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7c5b      	ldrb	r3, [r3, #17]
 80014a2:	4608      	mov	r0, r1
 80014a4:	4611      	mov	r1, r2
 80014a6:	461a      	mov	r2, r3
 80014a8:	f7ff fc4e 	bl	8000d48 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff ffd6 	bl	80014b8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <SystemCoreSetup+0x94>)
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <SystemCoreSetup+0x98>)
 8001512:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001514:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001518:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800151a:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <SystemCoreSetup+0x94>)
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <SystemCoreSetup+0x94>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001526:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <SystemCoreSetup+0x9c>)
 800152c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001530:	3314      	adds	r3, #20
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f023 030f 	bic.w	r3, r3, #15
 800153c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <SystemCoreSetup+0x9c>)
 8001548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154c:	3314      	adds	r3, #20
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8001552:	4a10      	ldr	r2, [pc, #64]	; (8001594 <SystemCoreSetup+0x94>)
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <SystemCoreSetup+0x94>)
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f023 0310 	bic.w	r3, r3, #16
 800155c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800155e:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <SystemCoreSetup+0x94>)
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <SystemCoreSetup+0x94>)
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	f023 0308 	bic.w	r3, r3, #8
 8001568:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SystemCoreSetup+0x94>)
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <SystemCoreSetup+0x94>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <SystemCoreSetup+0x94>)
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemCoreSetup+0x94>)
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001580:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8001582:	4a04      	ldr	r2, [pc, #16]	; (8001594 <SystemCoreSetup+0x94>)
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <SystemCoreSetup+0x94>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	e000ed00 	.word	0xe000ed00
 8001598:	08000000 	.word	0x08000000
 800159c:	58001000 	.word	0x58001000

080015a0 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]

  return (status);
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80015c4:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <OSCHP_GetFrequency+0x10>)
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	00b71b00 	.word	0x00b71b00

080015d4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80015d4:	b5b0      	push	{r4, r5, r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <SystemCoreClockSetup+0x54>)
 80015dc:	1d3c      	adds	r4, r7, #4
 80015de:	461d      	mov	r5, r3
 80015e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffbe 	bl	800056c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff f893 	bl	800071c <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff f848 	bl	800068c <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80015fc:	2004      	movs	r0, #4
 80015fe:	f7ff f919 	bl	8000834 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8001602:	f7ff f953 	bl	80008ac <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8001606:	2001      	movs	r0, #1
 8001608:	2120      	movs	r1, #32
 800160a:	f7ff f95f 	bl	80008cc <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff f850 	bl	80006b4 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff f935 	bl	8000884 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff f91e 	bl	800085c <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	0800199c 	.word	0x0800199c

0800162c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001636:	4829      	ldr	r0, [pc, #164]	; (80016dc <DAVE_Init+0xb0>)
 8001638:	f7ff ffb2 	bl	80015a0 <CLOCK_XMC4_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d104      	bne.n	8001650 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
 8001646:	4826      	ldr	r0, [pc, #152]	; (80016e0 <DAVE_Init+0xb4>)
 8001648:	f7ff ff16 	bl	8001478 <DIGITAL_IO_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_1); 
 8001656:	4823      	ldr	r0, [pc, #140]	; (80016e4 <DAVE_Init+0xb8>)
 8001658:	f7ff ff0e 	bl	8001478 <DIGITAL_IO_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d104      	bne.n	8001670 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_2); 
 8001666:	4820      	ldr	r0, [pc, #128]	; (80016e8 <DAVE_Init+0xbc>)
 8001668:	f7ff ff06 	bl	8001478 <DIGITAL_IO_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d104      	bne.n	8001680 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_3); 
 8001676:	481d      	ldr	r0, [pc, #116]	; (80016ec <DAVE_Init+0xc0>)
 8001678:	f7ff fefe 	bl	8001478 <DIGITAL_IO_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d104      	bne.n	8001690 <DAVE_Init+0x64>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_4 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_4); 
 8001686:	481a      	ldr	r0, [pc, #104]	; (80016f0 <DAVE_Init+0xc4>)
 8001688:	f7ff fef6 	bl	8001478 <DIGITAL_IO_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d104      	bne.n	80016a0 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_5); 
 8001696:	4817      	ldr	r0, [pc, #92]	; (80016f4 <DAVE_Init+0xc8>)
 8001698:	f7ff feee 	bl	8001478 <DIGITAL_IO_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d104      	bne.n	80016b0 <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_6 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_6); 
 80016a6:	4814      	ldr	r0, [pc, #80]	; (80016f8 <DAVE_Init+0xcc>)
 80016a8:	f7ff fee6 	bl	8001478 <DIGITAL_IO_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d104      	bne.n	80016c0 <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_7 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_7); 
 80016b6:	4811      	ldr	r0, [pc, #68]	; (80016fc <DAVE_Init+0xd0>)
 80016b8:	f7ff fede 	bl	8001478 <DIGITAL_IO_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <DAVE_Init+0xa4>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <DAVE_Init+0xd4>)
 80016c8:	f7ff fdbe 	bl	8001248 <SYSTIMER_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	1ffe8810 	.word	0x1ffe8810
 80016e0:	080018fc 	.word	0x080018fc
 80016e4:	08001910 	.word	0x08001910
 80016e8:	08001924 	.word	0x08001924
 80016ec:	08001938 	.word	0x08001938
 80016f0:	0800194c 	.word	0x0800194c
 80016f4:	08001960 	.word	0x08001960
 80016f8:	08001974 	.word	0x08001974
 80016fc:	08001988 	.word	0x08001988
 8001700:	1ffe880c 	.word	0x1ffe880c

08001704 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	2201      	movs	r2, #1
 8001714:	409a      	lsls	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	605a      	str	r2, [r3, #4]
}
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001736:	409a      	lsls	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
}
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop

08001748 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7c1b      	ldrb	r3, [r3, #16]
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff ffd2 	bl	8001704 <XMC_GPIO_SetOutputHigh>
}
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop

08001768 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7c1b      	ldrb	r3, [r3, #16]
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff ffd2 	bl	8001724 <XMC_GPIO_SetOutputLow>
}
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop

08001788 <Timer_Callback>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

__IO uint32_t counter = 0;
void Timer_Callback(void){
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	if(counter>=UINT32_MAX)
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <Timer_Callback+0x28>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d102      	bne.n	800179c <Timer_Callback+0x14>
		counter = 0;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <Timer_Callback+0x28>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
	counter++;
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <Timer_Callback+0x28>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <Timer_Callback+0x28>)
 80017a4:	6013      	str	r3, [r2, #0]
}
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	1ffe8814 	.word	0x1ffe8814

080017b4 <Delay_ms>:



void Delay_ms(uint32_t time){
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	const uint32_t prevTime = counter;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <Delay_ms+0x28>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
	while(counter<(prevTime+time));
 80017c2:	bf00      	nop
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	441a      	add	r2, r3
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <Delay_ms+0x28>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d8f8      	bhi.n	80017c4 <Delay_ms+0x10>
}
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	1ffe8814 	.word	0x1ffe8814

080017e0 <main>:

int main(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  uint32_t TimerId;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80017e6:	f7ff ff21 	bl	800162c <DAVE_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d000      	beq.n	80017f6 <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 80017f4:	e7fe      	b.n	80017f4 <main+0x14>
  }

  TimerId = SYSTIMER_CreateTimer(TIME_1_SEC,SYSTIMER_MODE_PERIODIC,(void*)Timer_Callback,NULL);
 80017f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017fa:	2101      	movs	r1, #1
 80017fc:	4a22      	ldr	r2, [pc, #136]	; (8001888 <main+0xa8>)
 80017fe:	2300      	movs	r3, #0
 8001800:	f7ff fd5c 	bl	80012bc <SYSTIMER_CreateTimer>
 8001804:	6038      	str	r0, [r7, #0]
  if(TimerId != 0U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <main+0x36>
	{
	  //Timer is created successfully
	  // Start/Run Software Timer
	  status = SYSTIMER_StartTimer(TimerId);
 800180c:	6838      	ldr	r0, [r7, #0]
 800180e:	f7ff fdf3 	bl	80013f8 <SYSTIMER_StartTimer>
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]


  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 8001816:	481d      	ldr	r0, [pc, #116]	; (800188c <main+0xac>)
 8001818:	f7ff ffa6 	bl	8001768 <DIGITAL_IO_SetOutputLow>
	  DIGITAL_IO_SetOutputLow(&DIGITAL_IO_1);
 800181c:	481c      	ldr	r0, [pc, #112]	; (8001890 <main+0xb0>)
 800181e:	f7ff ffa3 	bl	8001768 <DIGITAL_IO_SetOutputLow>
	  DIGITAL_IO_SetOutputLow(&DIGITAL_IO_2);
 8001822:	481c      	ldr	r0, [pc, #112]	; (8001894 <main+0xb4>)
 8001824:	f7ff ffa0 	bl	8001768 <DIGITAL_IO_SetOutputLow>
	  DIGITAL_IO_SetOutputLow(&DIGITAL_IO_3);
 8001828:	481b      	ldr	r0, [pc, #108]	; (8001898 <main+0xb8>)
 800182a:	f7ff ff9d 	bl	8001768 <DIGITAL_IO_SetOutputLow>
	  DIGITAL_IO_SetOutputLow(&DIGITAL_IO_4);
 800182e:	481b      	ldr	r0, [pc, #108]	; (800189c <main+0xbc>)
 8001830:	f7ff ff9a 	bl	8001768 <DIGITAL_IO_SetOutputLow>
	  DIGITAL_IO_SetOutputLow(&DIGITAL_IO_5);
 8001834:	481a      	ldr	r0, [pc, #104]	; (80018a0 <main+0xc0>)
 8001836:	f7ff ff97 	bl	8001768 <DIGITAL_IO_SetOutputLow>
	  DIGITAL_IO_SetOutputLow(&DIGITAL_IO_6);
 800183a:	481a      	ldr	r0, [pc, #104]	; (80018a4 <main+0xc4>)
 800183c:	f7ff ff94 	bl	8001768 <DIGITAL_IO_SetOutputLow>
	  DIGITAL_IO_SetOutputLow(&DIGITAL_IO_7);
 8001840:	4819      	ldr	r0, [pc, #100]	; (80018a8 <main+0xc8>)
 8001842:	f7ff ff91 	bl	8001768 <DIGITAL_IO_SetOutputLow>
	  Delay_ms(1000);
 8001846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800184a:	f7ff ffb3 	bl	80017b4 <Delay_ms>

	  DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <main+0xac>)
 8001850:	f7ff ff7a 	bl	8001748 <DIGITAL_IO_SetOutputHigh>
	  DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_1);
 8001854:	480e      	ldr	r0, [pc, #56]	; (8001890 <main+0xb0>)
 8001856:	f7ff ff77 	bl	8001748 <DIGITAL_IO_SetOutputHigh>
	  DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_2);
 800185a:	480e      	ldr	r0, [pc, #56]	; (8001894 <main+0xb4>)
 800185c:	f7ff ff74 	bl	8001748 <DIGITAL_IO_SetOutputHigh>
	  DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_3);
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <main+0xb8>)
 8001862:	f7ff ff71 	bl	8001748 <DIGITAL_IO_SetOutputHigh>
	  DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_4);
 8001866:	480d      	ldr	r0, [pc, #52]	; (800189c <main+0xbc>)
 8001868:	f7ff ff6e 	bl	8001748 <DIGITAL_IO_SetOutputHigh>
	  DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_5);
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <main+0xc0>)
 800186e:	f7ff ff6b 	bl	8001748 <DIGITAL_IO_SetOutputHigh>
	  DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_6);
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <main+0xc4>)
 8001874:	f7ff ff68 	bl	8001748 <DIGITAL_IO_SetOutputHigh>
	  DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_7);
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <main+0xc8>)
 800187a:	f7ff ff65 	bl	8001748 <DIGITAL_IO_SetOutputHigh>
	  Delay_ms(1000);
 800187e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001882:	f7ff ff97 	bl	80017b4 <Delay_ms>
  }
 8001886:	e7c6      	b.n	8001816 <main+0x36>
 8001888:	08001789 	.word	0x08001789
 800188c:	080018fc 	.word	0x080018fc
 8001890:	08001910 	.word	0x08001910
 8001894:	08001924 	.word	0x08001924
 8001898:	08001938 	.word	0x08001938
 800189c:	0800194c 	.word	0x0800194c
 80018a0:	08001960 	.word	0x08001960
 80018a4:	08001974 	.word	0x08001974
 80018a8:	08001988 	.word	0x08001988

080018ac <__libc_init_array>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	4e0f      	ldr	r6, [pc, #60]	; (80018ec <__libc_init_array+0x40>)
 80018b0:	4d0f      	ldr	r5, [pc, #60]	; (80018f0 <__libc_init_array+0x44>)
 80018b2:	1b76      	subs	r6, r6, r5
 80018b4:	10b6      	asrs	r6, r6, #2
 80018b6:	bf18      	it	ne
 80018b8:	2400      	movne	r4, #0
 80018ba:	d005      	beq.n	80018c8 <__libc_init_array+0x1c>
 80018bc:	3401      	adds	r4, #1
 80018be:	f855 3b04 	ldr.w	r3, [r5], #4
 80018c2:	4798      	blx	r3
 80018c4:	42a6      	cmp	r6, r4
 80018c6:	d1f9      	bne.n	80018bc <__libc_init_array+0x10>
 80018c8:	4e0a      	ldr	r6, [pc, #40]	; (80018f4 <__libc_init_array+0x48>)
 80018ca:	4d0b      	ldr	r5, [pc, #44]	; (80018f8 <__libc_init_array+0x4c>)
 80018cc:	1b76      	subs	r6, r6, r5
 80018ce:	f7ff fa5d 	bl	8000d8c <_init>
 80018d2:	10b6      	asrs	r6, r6, #2
 80018d4:	bf18      	it	ne
 80018d6:	2400      	movne	r4, #0
 80018d8:	d006      	beq.n	80018e8 <__libc_init_array+0x3c>
 80018da:	3401      	adds	r4, #1
 80018dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e0:	4798      	blx	r3
 80018e2:	42a6      	cmp	r6, r4
 80018e4:	d1f9      	bne.n	80018da <__libc_init_array+0x2e>
 80018e6:	bd70      	pop	{r4, r5, r6, pc}
 80018e8:	bd70      	pop	{r4, r5, r6, pc}
 80018ea:	bf00      	nop
 80018ec:	1ffe8800 	.word	0x1ffe8800
 80018f0:	1ffe8800 	.word	0x1ffe8800
 80018f4:	1ffe8800 	.word	0x1ffe8800
 80018f8:	1ffe8800 	.word	0x1ffe8800

080018fc <DIGITAL_IO_0>:
 80018fc:	48028500 00000080 00010000 00000000     ...H............
 800190c:	00000004                                ....

08001910 <DIGITAL_IO_1>:
 8001910:	48028500 00000080 00010000 00000000     ...H............
 8001920:	00000002                                ....

08001924 <DIGITAL_IO_2>:
 8001924:	48028500 00000080 00010000 00000000     ...H............
 8001934:	00000009                                ....

08001938 <DIGITAL_IO_3>:
 8001938:	48028500 00000080 00010000 00000000     ...H............
 8001948:	00000008                                ....

0800194c <DIGITAL_IO_4>:
 800194c:	48028500 00000080 00010000 00000000     ...H............
 800195c:	00000007                                ....

08001960 <DIGITAL_IO_5>:
 8001960:	48028500 00000080 00010000 00000000     ...H............
 8001970:	00000006                                ....

08001974 <DIGITAL_IO_6>:
 8001974:	48028500 00000080 00010000 00000000     ...H............
 8001984:	00000005                                ....

08001988 <DIGITAL_IO_7>:
 8001988:	48028500 00000080 00010000 00000000     ...H............
 8001998:	00000003 01010230 00010000 00000000     ....0...........
 80019a8:	00010000 01010102                       ........
